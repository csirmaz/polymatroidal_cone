#!/usr/bin/perl

use strict;

my $code = $ENV{'MATROID_CODE'};
my $logs = $ENV{'MATROID_LOGS'};

my $STEP = 97;
my $MINSTEP = 26;

while(1) {
    
    print "RUNNING STEP $STEP\n";
    
    my $output = $logs . "/by_ray_id/n5_vary".$STEP."_output";
    # my $output = $logs . "/by_ray/n5_vary".$STEP."_output";
    # my $output = $logs . "/by_ray_pair/n5_vary".$STEP."_output";

    # Run slicer
    `make slicer_run_5_i > $output`;
    # `make slicer_run_5 > $output`;
    
    # Evaluate
    my $eval = `python $code/get_pair_data.py $STEP 5 < $output`;
    
    # Get the next axiom
    my $pattern = 'Ordered by number of previous rays:\\s*Step=' . $STEP . '[ \\$\\.]+\\(min\\) Axiom([0-9]+)';
    # my $pattern = 'Ordered by number of ray pairs:\\s*Step=' . $STEP . '[ #\\.]+\\(min\\) Axiom([0-9]+)';
    unless($eval =~ /$pattern/s) { die "Cannot eval eval\n$eval\n"; }
    my $next_axiom = $1;
    print "New axiom: $next_axiom\n";
    
    `$code/alter_slicer_c $next_axiom < $code/slicer.c > $code/slicer.c.new`;
    `mv $code/slicer.c $code/slicer.c.old`;
    `mv $code/slicer.c.new $code/slicer.c`;
    
    $STEP--;
    if($STEP < $MINSTEP) { last; }
}

